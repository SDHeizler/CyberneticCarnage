{"version":3,"sources":["pictures/YourRobotPic.jpg","pictures/menu.svg","pictures/refresh.png","pictures/Robot1.jpg","RobotsDatabasetest.js","components/NavBar.js","components/Home.js","components/YourRobotStats.js","components/YourRobot.js","components/Filler.js","components/HealthBar.js","components/RobotFightCard.js","components/EnemyFightCard.js","components/OneFight.js","components/404.js","components/YouLose.js","components/YouWin.js","components/Reset.js","App.js","index.js"],"names":["module","exports","Robots","name","Health","PlayerRobot","Attacks","NavBar","id","className","style","NavBarStyle","onClick","this","props","NavBarResetStyle","TitleStyle","LinkContainerStyle","NavBarLinkStyle","to","containerHamburgerMenu","onPointerLeave","onPointerEnter","imgStyle","src","Menu","alt","containerGitHubLink","GitHubLinkStyle","ListItemStyle","target","rel","hrefStyle","href","React","Component","height","background","display","justifyContent","paddingTop","color","width","textDecoration","fontSize","fontFamily","marginRight","marginLeft","position","left","borderBottom","borderRadius","transition","Home","HomePageStyle","Loading","LoadingStyle","NotLoadingStyle","Refresh","HomeStyleNav","LinkStyle","FooterStyle","marginTop","bottom","right","top","animationName","animationDuration","animationFillMode","animationIterationCount","animationTimingFunction","YourRobotStats","DivContStyle","DivSize","YourRobotImageStyle","RobotImage","UlListStyle","YourRobotStatsStyle","YourRobotHealthStyle","health","OlListStyle","YourRobotAttackStyle","attacks","map","ele","index","YourRobotAttackListStyle","key","listStyleType","textAlign","border","backgroundColor","flexDirection","alignItems","YourRobot","state","YourRobotPageStyle","_id","YourRobotPic","Filler","HealthBar","progressBar","RobotFightCard","AttackStyle","Name","RobotImageStyle","formStyle","onSubmit","e","LabelInputStyle","htmlFor","onChange","type","value","checked","Number","Checked","required","disabled","EnemyFightCard","EnemyStyle","EnemyImageStyle","EnemyRobotPic","OneFight","FightPageStyle","containerStyle","EnemyRobot","Robot1","Error","YouLose","YouLosePageStyle","YouLoseButtonStyle","paddingLeft","paddingRight","paddingBottom","YouWin","YouWinPageStyle","YouWinButtonStyle","Reset","ResetPageStyle","ResetPageButtonStyle","App","prop","a","preventDefault","setState","PlayerAttack","NaN","EnemyAttackStyle","enemyChoice","Math","floor","random","newPlayerHealth","Disabled","setTimeout","healEnemy","updatePlayer","updateEnemy","history","push","padding","youWinButton","enemyId","axios","delete","then","response","data","catch","err","console","log","newEnemyRobot","length","resetButton","post","resetRobots","find","getEnemyRobot","getYourRobot","EnemyRobots","get","res","getEnemyRobots","filter","enemyNum","findEnemyRobot","exact","path","withRouter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfdc852b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/YourRobotPic.ce6e68ba.jpg\";","module.exports = __webpack_public_path__ + \"static/media/menu.f80cd3a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/refresh.9962e4b7.png\";","module.exports = __webpack_public_path__ + \"static/media/Robot1.c35f1b67.jpg\";","const Robots = [\r\n    {\r\n        name:'Awesomous Prime',\r\n        Health:100,\r\n        PlayerRobot: true,\r\n        Attacks:[\r\n            'Attack', 'Defend','Heal'\r\n        ]\r\n    },\r\n    {\r\n        name:'Lord Vol Demort',\r\n        Health:100,\r\n        PlayerRobot: false,\r\n        Attacks:[\r\n        ]\r\n    },\r\n    {\r\n        name:'MacDonald-Berger',\r\n        Health:100,\r\n        PlayerRobot: false,\r\n        Attacks:[\r\n        ]\r\n    },\r\n     {\r\n        name:' Lieutenant Les Mcburney',\r\n        Health:100,\r\n        PlayerRobot: false,\r\n        Attacks:[\r\n        ]\r\n    },\r\n     {\r\n        name:'Donald Duck',\r\n        Health:100,\r\n        PlayerRobot: false,\r\n        Attacks:[\r\n        ]\r\n    },\r\n     {\r\n        name:'Kash Register',\r\n        Health:100,\r\n        PlayerRobot: false,\r\n        Attacks:[\r\n        ]\r\n    },\r\n     {\r\n        name:'Chris P. Bacon',\r\n        Health:100,\r\n        PlayerRobot: false,\r\n        Attacks:[\r\n        ]\r\n    },\r\n];\r\n\r\nexport default Robots;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Menu from '../pictures/menu.svg';\r\nimport PropTypes from 'prop-types';\r\nclass NavBar extends React.Component {\r\n\r\n    render() { \r\n        return ( \r\n            <div id='NavBarContainerDiv' className=' bg-dark text-white' style={NavBarStyle}>\r\n                <button onClick={this.props.onClick} id='NavBarResetButton' className=' btn-danger' style={NavBarResetStyle}>Reset</button>\r\n                <h4 id='NavBarTitle' style={TitleStyle}>Cybernetic Carnage</h4>\r\n                <div style={LinkContainerStyle}>\r\n                <div>\r\n                    <Link className='LinkHover' style={NavBarLinkStyle} \r\n                    to='/CyberneticCarnage'>Home</Link>\r\n                </div>\r\n                <div style={containerHamburgerMenu}>\r\n                    <img onPointerLeave={this.props.onPointerLeave} onPointerEnter={this.props.onPointerEnter} style={imgStyle} src={Menu} alt=''></img>\r\n                    <div style={containerGitHubLink}>\r\n                    <ul  className='bg-dark text-white' onPointerLeave={this.props.onPointerLeave} onPointerEnter={this.props.onPointerEnter} style={this.props.GitHubLinkStyle}>\r\n                        <li style={ListItemStyle}><a target='_blank' rel='noopener noreferrer' style={hrefStyle} href='https://github.com/SDHeizler/CyberneticCarnage'>Github</a></li>\r\n                        <li style={ListItemStyle}><a style={hrefStyle} href='https://sdheizler.github.io/MyPortfolio/' target='_blank' rel='noopener noreferrer'>Portfolio</a></li>\r\n                    </ul>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nconst NavBarStyle = {\r\n    height:'55px',\r\n    background:'#234691',\r\n    display:'flex',\r\n    justifyContent:'space-around',\r\n    paddingTop:'10px',\r\n    color:'White',\r\n    width:'100%'\r\n}; \r\nconst NavBarLinkStyle = {\r\n    color:'White',\r\n    textDecoration:'none',\r\n    fontSize:'20px',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'\r\n};\r\nconst imgStyle = {\r\n    height:'25px',\r\n    width:'25px',\r\n    marginRight:'2em',\r\n    marginLeft:'2em'\r\n};\r\nconst LinkContainerStyle ={\r\n    display:'flex',\r\n    \r\n}\r\nconst containerGitHubLink = {\r\n    position:'absolute',\r\n    left:'0'\r\n};\r\nconst containerHamburgerMenu = {\r\n    position:'relative',\r\n    marginRight:'2vw'\r\n};\r\nconst ListItemStyle = {\r\n    borderBottom:'1px solid black',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'\r\n};\r\nconst hrefStyle={\r\n    color:'White',\r\n    textDecoration:'none',\r\n    fontSize:'20px'\r\n};\r\nconst NavBarResetStyle = {\r\n    marginRight:'auto',\r\n    borderRadius:'7px'\r\n};\r\nconst TitleStyle = {\r\n    marginRight:'30vw',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif',\r\n    transition: 'ease-in-out, 200ms'\r\n};\r\n\r\n// PropTypes\r\nNavBar.propTypes = {\r\n    onClick:PropTypes.func,\r\n    onPointerEnter:PropTypes.func,\r\n    onPointerLeave:PropTypes.func,\r\n    \r\n};\r\nexport default NavBar;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport NavBar from './NavBar';\r\nimport PropTypes from 'prop-types';\r\nimport Refresh from '../pictures/refresh.png'\r\nclass Home extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div className='HomePage' style={HomePageStyle}>\r\n                <div style={this.props.Loading ? LoadingStyle : NotLoadingStyle}> \r\n                    <img style={this.props.Loading ? Loading : NotLoadingStyle}  src={Refresh} alt='refresh'></img>\r\n                </div>\r\n                <NavBar onClick={this.props.onClick} onPointerLeave={this.props.onPointerLeave} onPointerEnter={this.props.onPointerEnter} GitHubLinkStyle={this.props.GitHubLinkStyle}></NavBar>\r\n                <div className='jubotron jubotron-fluid'>\r\n                    <h1 className='display-3'>Welcome to Cybernetic Carnage</h1>\r\n                    <p className='lead' style={{fontSize:'30px'}}>Get ready for battle!</p>\r\n                </div>\r\n                <div className='homeStyleNav' style={HomeStyleNav}>\r\n                <Link className='LinkHover' style={this.props.Loading ? NotLoadingStyle : LinkStyle} to='/YourRobot'>YourRobot</Link>\r\n                <Link className=\"LinkHover\" style={this.props.Loading ? NotLoadingStyle : LinkStyle}  to='/SingleBattle'>Battle</Link>\r\n                </div>\r\n                <footer className='bg-dark text-white' style={FooterStyle}>\r\n                    <h4>&#169; 2020 Scott Heizler</h4>\r\n                </footer>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nconst HomeStyleNav = {\r\n    display:'flex',\r\n    justifyContent:'space-around',\r\n    fontSize:'50px',\r\n    marginTop:'25vh',\r\n};\r\nconst LinkStyle = {\r\n    textDecoration:'none',\r\n    color:'White',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'\r\n};\r\nconst HomePageStyle = {\r\n    color:'White',\r\n    height:'95%',\r\n   \r\n};\r\nconst FooterStyle = {\r\n    height:'55px',\r\n    width:'100%',\r\n    position:'absolute',\r\n    bottom:'0'\r\n\r\n};\r\nconst LoadingStyle = {\r\n    position:'absolute',\r\n    left:'35%',\r\n    right:'35%',\r\n    top:'50%',\r\n    bottom:'50%',\r\n};\r\nconst Loading = {\r\n    animationName:'Loading',\r\n    animationDuration:'2s',\r\n    animationFillMode:'forwards',\r\n    animationIterationCount:'infinite',\r\n    animationTimingFunction:'ease-in-out',\r\n    width:'50px',\r\n    height:'50px'\r\n};\r\nconst NotLoadingStyle = {\r\n    display:'none'\r\n};\r\n\r\n// PropTypes\r\nHome.propTypes = {\r\n    onClick:PropTypes.func.isRequired,\r\n    onPointerEnter:PropTypes.func.isRequired,\r\n    onPointerLeave:PropTypes.func.isRequired,\r\n    GitHubLinkStyle:PropTypes.object\r\n};\r\nexport default Home;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nclass YourRobotStats extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div style={DivContStyle} className='bg-dark text-white '>\r\n                    <h1 id='YourRobotName' style={{fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif', fontSize:'3vw'}}>Name: {this.props.name}</h1>\r\n                    <div style={DivSize}>\r\n                    <img style={YourRobotImageStyle} src={this.props.RobotImage} alt=''></img>\r\n                    <ul style={UlListStyle}>\r\n                        <h3 style={YourRobotStatsStyle}>Stats:</h3>\r\n                        <li style={YourRobotHealthStyle}>Health:{this.props.health}</li>\r\n                    </ul>\r\n                    </div>\r\n                    <div style={DivSize}>\r\n                    <ol style={OlListStyle}>\r\n                        <h4 style={YourRobotAttackStyle}>Attacks:</h4>\r\n                        {this.props.attacks.map((ele, index) => {\r\n                            return(\r\n                            <li style={YourRobotAttackListStyle} key={index}>{ele}</li>\r\n                            )\r\n                        })}\r\n                    </ol>\r\n                    </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nconst UlListStyle = {\r\n    listStyleType:'none',\r\n    textAlign:'center'\r\n};\r\nconst OlListStyle = {\r\n    textAlign:'center',\r\n};\r\nconst DivSize = {\r\n    width:'30%',\r\n\r\n};\r\nconst YourRobotImageStyle = {\r\n    height:'auto',\r\n    width:'15vw',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'\r\n};\r\nconst YourRobotStatsStyle = {\r\n    fontSize:'3.5vh',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'\r\n};\r\nconst YourRobotHealthStyle = {\r\n    fontSize:'2.5vh',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'\r\n};\r\nconst YourRobotAttackStyle = {\r\n    fontSize:'3.5vh',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'\r\n};\r\nconst YourRobotAttackListStyle = {\r\n    fontSize:'2.5vh',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'\r\n};\r\nconst DivContStyle = {\r\n    border:'1px solid black',\r\n    backgroundColor:'rgba(211, 211, 211, 0.850)',\r\n    color:'black',\r\n    borderRadius:'8px',\r\n    marginTop:'25px',\r\n    display:'flex',\r\n    flexDirection:'column',\r\n    alignItems:'center',\r\n    width:'40vw',\r\n    height:'auto',\r\n    marginLeft:'auto',\r\n    marginRight:'auto'\r\n};\r\n\r\n// PropTypes\r\nYourRobotStats.propTypes = {\r\n    name:PropTypes.string,\r\n    health:PropTypes.number,\r\n    attacks:PropTypes.array\r\n};\r\nexport default YourRobotStats;","import React from 'react';\r\nimport YourRobotStats from './YourRobotStats';\r\nimport YourRobotPic from '../pictures/YourRobotPic.jpg';\r\nimport NavBar from './NavBar';\r\nimport PropTypes from 'prop-types'\r\nclass YourRobot extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            YourRobot:[]\r\n        }\r\n    };\r\n    render() { \r\n        return ( \r\n            <div className='YourRobotPage' style={YourRobotPageStyle}>\r\n                <NavBar\r\n                onClick={this.props.onClick} \r\n                onPointerLeave={this.props.onPointerLeave} \r\n                onPointerEnter={this.props.onPointerEnter} \r\n                GitHubLinkStyle={this.props.GitHubLinkStyle}\r\n                ></NavBar>\r\n                {this.props.YourRobot.map((ele) => {\r\n                        return(\r\n                            <YourRobotStats\r\n                            key={ele._id}\r\n                            name={ele.name}\r\n                            health={ele.Health}\r\n                            attacks={ele.Attacks}\r\n                            RobotImage={YourRobotPic}\r\n                            ></YourRobotStats>\r\n                        )\r\n                })}\r\n            </div>\r\n         );\r\n    }\r\n}\r\nconst YourRobotPageStyle = {\r\n    height:'100vh',\r\n    color:'White',\r\n};\r\n\r\n// PropTypes\r\nYourRobot.propTypes = {\r\n    onClick:PropTypes.func.isRequired,\r\n    onPointerEnter:PropTypes.func.isRequired,\r\n    onPointerLeave:PropTypes.func.isRequired,\r\n    YourRobot:PropTypes.array\r\n};\r\nexport default YourRobot;","import React from 'react';\r\nclass Filler extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div style={{width:`${this.props.Health}%`, backgroundColor:'#B72000',  borderRadius:'50px', height:'100%', textAlign:'center'}}>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nexport default Filler;","import React from 'react';\r\nimport Filler from './Filler';\r\nimport PropTypes from 'prop-types';\r\nclass HealthBar extends React.Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div>\r\n              <div style={progressBar}>\r\n                  <Filler Health={this.props.Health}></Filler>\r\n              </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nconst progressBar={\r\n    marginLeft:'auto',\r\n    marginRight:'auto',\r\n    height:'30px',\r\n    width:'100%',\r\n    borderRadius:'50px',\r\n    border:'1px solid black',\r\n    position:'relative'\r\n};\r\n\r\n// PropTypes\r\nHealthBar.propTypes = {\r\n    Health:PropTypes.number.isRequired\r\n};\r\nexport default HealthBar;","import React from 'react';\r\nimport HealthBar from './HealthBar';\r\nimport PropTypes from 'prop-types';\r\nclass RobotFightCard extends React.Component {\r\n    \r\n    \r\n    render() { \r\n        return ( \r\n            <div className='YourRobot bg-dark text-white' style={this.props.AttackStyle}>\r\n                <h3>{this.props.Name}</h3>\r\n                <img style={RobotImageStyle} src={this.props.RobotImage} alt=''></img>\r\n                <h4>Health: {this.props.Health}%</h4>\r\n                <HealthBar Health={this.props.Health}></HealthBar>\r\n                <form className='form' style={formStyle}\r\n                target='input'\r\n                    onSubmit={(e) => {this.props.onSubmit(e)}}>\r\n                        \r\n                    {this.props.Attacks.map((ele, index) => {\r\n                        return(\r\n                                <label\r\n                                    style={LabelInputStyle}\r\n                                    key={index} \r\n                                    htmlFor='Attacks'>\r\n                                    {ele} {' '}\r\n                                        <input onChange={(e) => this.props.onChange(e)}\r\n                                        name=\"Attacks\" \r\n                                        type='radio' \r\n                                        value={ele} \r\n                                        id={index}\r\n                                        checked={Number(this.props.Checked) === index}\r\n                                        required\r\n                                        ></input>\r\n                                </label>\r\n                        )\r\n                    })}\r\n\r\n                    <button disabled={this.props.disabled} className='btn btn-primary btn-lg' type='Submit'>End Turn</button>\r\n                </form>\r\n                \r\n            </div>\r\n         );\r\n    }\r\n};\r\n \r\nconst formStyle={\r\n    display:'flex',\r\n    flexDirection:'column',\r\n    \r\n};\r\nconst RobotImageStyle = {\r\n    height:'auto',\r\n    width:'12vw'\r\n};\r\nconst LabelInputStyle = {\r\n    fontSize:'2.5vh',\r\n    marginTop:'10px',\r\n};\r\n\r\n// PropTypes\r\nRobotFightCard.propTypes = {\r\n    AttackStyle:PropTypes.object,\r\n    Name:PropTypes.string,\r\n    Health:PropTypes.number,\r\n    onSubmit:PropTypes.func,\r\n    Attacks:PropTypes.array,\r\n    disabled:PropTypes.bool\r\n};\r\nexport default RobotFightCard;","import React from 'react';\r\nimport HealthBar from './HealthBar';\r\nimport PropTypes from 'prop-types';\r\nclass EnemyFightCard extends React.Component {\r\n    \r\n    render() { \r\n        \r\n        return ( \r\n            <div className='bg-dark text-white' style={this.props.EnemyStyle}>\r\n                <h3>{this.props.Name}</h3>\r\n                <img style={EnemyImageStyle} src={this.props.EnemyRobotPic} alt=''></img>\r\n                <h4 style={{transition:'ease-in, 200ms'}} id='EnemyRobotHealth'>Health:{this.props.Health}%</h4>\r\n                <HealthBar Health={this.props.Health}></HealthBar>\r\n            </div>\r\n            );\r\n    }\r\n}\r\nconst EnemyImageStyle = {\r\n    height:'auto',\r\n    width:'9vw'\r\n};\r\n\r\n// PropTypes\r\nEnemyFightCard.propTypes = {\r\n    EnemyStyle:PropTypes.object,\r\n    Name:PropTypes.string,\r\n    Health:PropTypes.number,\r\n    \r\n};\r\nexport default EnemyFightCard;","import React from 'react';\r\nimport RobotFightCard from './RobotFightCard';\r\nimport EnemyFightCard from './EnemyFightCard';\r\nimport YourRobotPic from '../pictures/YourRobotPic.jpg';\r\nimport Robot1 from '../pictures/Robot1.jpg';\r\nimport NavBar from './NavBar';\r\nimport PropTypes from 'prop-types';\r\nclass OneFight extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div className='FightPage' style={FightPageStyle}>\r\n                <NavBar\r\n                onClick={this.props.onClick} \r\n                onPointerLeave={this.props.onPointerLeave} \r\n                onPointerEnter={this.props.onPointerEnter} \r\n                GitHubLinkStyle={this.props.GitHubLinkStyle}></NavBar>\r\n                <header>\r\n                <h1 style={{fontSize:'5.5vh', fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'}}>Battle!</h1>\r\n                </header>\r\n                <div style={containerStyle}>\r\n                {this.props.YourRobot.map((ele) => {\r\n                        return(\r\n                        <RobotFightCard key={ele._id} \r\n                        Name={ele.name} \r\n                        Attacks={ele.Attacks.map((ele, index) => {\r\n                            return ele\r\n                        })}\r\n                        Health={ele.Health}\r\n                        onSubmit={(e) => this.props.onSubmit(e)}\r\n                        onChange={(e) => this.props.onChange(e)}\r\n                        Checked={this.props.Checked}\r\n                        disabled={this.props.disabled}\r\n                        AttackStyle={this.props.AttackStyle}\r\n                        RobotImage={YourRobotPic}\r\n                        ></RobotFightCard>\r\n                    )\r\n                })}\r\n                <div>\r\n                </div>\r\n\r\n                <div>\r\n                    {this.props.EnemyRobot.map((ele, index) => {\r\n                        return(\r\n                            <EnemyFightCard\r\n                            key={ele._id}\r\n                            Health={ ele.Health}\r\n                            Name={ ele.name }\r\n                            EnemyStyle={this.props.EnemyStyle}\r\n                            EnemyRobotPic={Robot1}\r\n                            ></EnemyFightCard>\r\n                        )\r\n                })}\r\n                </div>\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n};\r\nconst containerStyle={\r\n    display:'flex',\r\n    justifyContent:'center',\r\n};\r\nconst FightPageStyle = {\r\n    height:'100%',\r\n    color:'White'\r\n};\r\n\r\n// PropTypes\r\nOneFight.propTypes = {\r\n    onClick:PropTypes.func.isRequired,\r\n    onPointerEnter:PropTypes.func.isRequired,\r\n    onPointerLeave:PropTypes.func.isRequired,\r\n    GitHubLinkStyle:PropTypes.object,\r\n    YourRobot:PropTypes.array,\r\n    onSubmit:PropTypes.func,\r\n    onChange:PropTypes.func,\r\n    disabled:PropTypes.bool,\r\n    AttackStyle:PropTypes.object,\r\n    EnemyStyle:PropTypes.object\r\n};\r\nexport default OneFight;","import React from 'react';\r\nfunction Error(){\r\n    return(\r\n        <div>\r\n            <h1>404</h1>\r\n            <p>Error has occured</p>\r\n        </div>\r\n    )\r\n};\r\nexport default Error;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nclass YouLose extends React.Component {\r\n    render() { \r\n        return(\r\n        <div className='YouLosePage' style={YouLosePageStyle}>\r\n                <h1>Sorry, you Lost. Click the button to Reset and try again</h1>\r\n                <button style={YouLoseButtonStyle} className='btn-primary' onClick={this.props.onClick}>Reset</button>\r\n        </div>\r\n    )\r\n    }\r\n};\r\nconst YouLosePageStyle = {\r\n    height:'100%',\r\n    color:'White',\r\n};\r\nconst YouLoseButtonStyle = {\r\n    paddingLeft:'40px',\r\n    paddingRight:'40px',\r\n    paddingTop:'20px',\r\n    paddingBottom:'20px',\r\n    fontSize:'20px',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'\r\n};\r\n\r\n// PropTypes\r\nYouLose.propTypes = {\r\n    onClick:PropTypes.func.isRequired\r\n};\r\nexport default YouLose;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nclass YouWin extends React.Component {\r\n    render() { \r\n        return(\r\n        <div className='YouWinPage' style={YouWinPageStyle}>\r\n                <h1 style={{fontSize:'60px',fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'}}>You Win!</h1>\r\n                <button style={YouWinButtonStyle} className='btn-primary' onClick={this.props.onClick}>Continue</button>\r\n        </div>\r\n    )\r\n    }\r\n};\r\nconst YouWinPageStyle = {\r\n    height:'100%',\r\n    color:'White',\r\n};\r\nconst YouWinButtonStyle = {\r\n     paddingLeft:'40px',\r\n    paddingRight:'40px',\r\n    paddingTop:'20px',\r\n    paddingBottom:'20px',\r\n    fontSize:'20px',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'\r\n};\r\n\r\n// PropTypes\r\nYouWin.propTypes = {\r\n    onClick:PropTypes.func.isRequired\r\n};\r\nexport default YouWin;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nclass Reset extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div className='ResetPage' style={ResetPageStyle}>\r\n                <h1 style={{fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'}}>There are no more battles left to fight</h1>\r\n                <p style={{fontSize:'30px',fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'}}>Click the button to reset</p>\r\n                <button style={ResetPageButtonStyle} className='btn-primary' onClick={this.props.onClick}>Reset</button>\r\n            </div>\r\n         );\r\n    }\r\n};\r\nconst ResetPageStyle = {\r\n    height:'100%',\r\n    color:'White'\r\n};\r\nconst ResetPageButtonStyle = {\r\n    paddingLeft:'40px',\r\n    paddingRight:'40px',\r\n    paddingTop:'20px',\r\n    paddingBottom:'20px',\r\n    fontSize:'20px',\r\n    fontFamily:'Open Sans, Noto Sans, Roboto, Sans Sarif'\r\n};\r\n\r\n// PropTypes\r\nReset.propTypes = {\r\n    onClick:PropTypes.func.isRequired\r\n};\r\nexport default Reset;","import React from 'react';\nimport './App.css';\nimport {Switch, Route, withRouter} from 'react-router-dom';\nimport Robots from './RobotsDatabasetest';\nimport Home from './components/Home';\nimport YourRobot from './components/YourRobot';\nimport OneFight from './components/OneFight';\nimport Error from './components/404';\nimport YouLose from './components/YouLose';\nimport YouWin from './components/YouWin';\nimport Reset from './components/Reset';\nimport axios from 'axios';\nimport PropTypes from 'prop-types'\n// https://radiant-everglades-71115.herokuapp.com/\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state={\n        Robots:[],\n        EnemyRobots:[],\n        EnemyRobot:[],\n        YourRobot:[],\n        PlayerAttack:'',\n        Checked:NaN,\n        Disabled:false,\n        AttackStyle:{\n        width:'25vw',\n        marginLeft:'0',\n        border:'5px solid black',\n        display:'inline-block',\n        position:'relative',\n        borderRadius:'8px'\n},\n        EnemyAttackStyle: {\n            width:'25vw',\n            marginLeft:'0',\n            border:'5px solid black',\n            display:'inline-block',\n            position:'relative',\n            borderRadius:'8px',\n        },\n        GitHubLinkStyle:{\n          display:'none'\n        },\n        Loading:false,\n    }\n  };\nasync componentDidMount(){\n  // Initial get request when app loads\n    this.setState({\n      ...this.state,\n      Loading:true\n    });\n    await axios.get('https://radiant-everglades-71115.herokuapp.com/')\n  .then((res) => {\n    let YourRobot =  res.data.find((ele) => {\n       if(ele.PlayerRobot === true){\n          return ele\n        }else{\n          return null\n        }\n    });\n    let getEnemyRobots =  res.data.filter((ele) => {\n      if(ele.PlayerRobot === false){\n        return ele\n    }\n    return null\n    });\n    this.setState({\n    ...this.state,\n    Robots:res.data,\n    YourRobot:[YourRobot],\n    EnemyRobots:getEnemyRobots,\n\n  });\n  })\n  .catch((err) => {console.log(err)});\n      //Find a random enemy robot and set it in state for initial load \n    let enemyNum = await Math.floor(Math.random() * Math.floor(this.state.EnemyRobots.length));\n      if(this.state.EnemyRobot.length < 1){\n        \n      }\n    let findEnemyRobot = await this.state.EnemyRobots.find((ele,index) => {\n        if(index === enemyNum){\n            return ele\n        }\n        return null\n        });\n\n    this.setState({...this.state,\n        EnemyRobot:[findEnemyRobot],\n        Loading:false\n    });\n  };\n\n  onSubmit = async (e, prop) => {\n    e.preventDefault();\n\n    // Resetting the stored css style in state\n    this.setState({ ...this.state,\n        PlayerAttack:'',\n        Checked:NaN,\n        AttackStyle:{\n          width:'25vw',\n          marginLeft:'0',\n          border:'5px solid black',\n          display:'inline-block',\n          position:'relative',\n          borderRadius:'8px'\n        },\n        EnemyAttackStyle: {\n            width:'25vw',\n            marginLeft:'0',\n            border:'5px solid black',\n            display:'inline-block',\n            position:'relative',\n            borderRadius:'8px'\n        }\n      });\n      // Declairing and storing the enemy choice for the turn\n     let enemyChoice = Math.floor(Math.random() * Math.floor(2));\n    //  Playing out if player chooses to heal\n    if(this.state.PlayerAttack === 'Heal'){\n      // Declaired and stored the update to the player health\n        let newPlayerHealth = this.state.YourRobot.map((ele) => {\n          if(ele.Health !== 100){\n              ele.Health = 100\n          }\n          return ele\n      });\n      // Updated state to show new player health\n      this.setState({...this.state,\n        YourRobot:newPlayerHealth,\n        Disabled:true,\n        PlayerAttack:'',\n        Checked:NaN,\n      })\n    // Starting enemy turn, set timeout for 2s so enemy attack/heal isn't instant\n      setTimeout(() => {\n        // If the enemy choice is 1, it will increase the heal of the enemy robot by 5 and sets state for the enemy robot. Plays a animation to show that.\n        setTimeout( () => {\n          if(enemyChoice === 1){\n        let healEnemy = this.state.EnemyRobot.map((ele) => {\n            if(ele.Health < 100){\n              ele.Health += 5\n            }\n            return ele;\n          })\n            this.setState({...this.state,\n            EnemyRobot: healEnemy,\n            EnemyAttackStyle:{\n            width:'25vw',\n            marginLeft:'0',\n            border:'5px solid Green',\n            display:'inline-block',\n            position:'relative',\n            borderRadius:'8px'\n          },\n          Disabled:false\n            })\n        }\n      }, 1000)\n        // If the choice is 0 then the player's robot will lose 10 health and the state will be set. Animation will play to show this action. The set timeout is there to sync the animation with the set state of the new player health.\n        if(enemyChoice === 0){\n        this.setState({...this.state,\n        AttackStyle:{\n          width:'25vw',\n          marginLeft:'0',\n          border:'5px solid black',\n          display:'inline-block',\n          position:'relative',\n          borderRadius:'8px'\n          },\n          EnemyAttackStyle:{\n          width:'25vw',\n          marginLeft:'0',\n          border:'5px solid black',\n          display:'inline-block',\n          position:'relative',\n          animationName:'EnemyAttack',\n          animationDuration:'1s',\n          animationTimingFunction:'ease-in',\n          borderRadius:'8px'\n          }\n      })\n      setTimeout(() =>{\n        let updatePlayer =  this.state.YourRobot.map((ele) => {\n            if(ele.Health > 0){\n            ele.Health -= 10\n          }\n            return ele\n          });\n        this.setState({...this.state,\n          Disabled:false,\n          YourRobot:updatePlayer,\n            EnemyAttackStyle: {\n            width:'25vw',\n            marginLeft:'0',\n            border:'5px solid black',\n            display:'inline-block',\n            position:'relative',\n            borderRadius:'8px'\n        }\n        })\n      }, 1000)\n        }\n      }, 2000)\n    }else if(this.state.PlayerAttack === 'Defend'){\n      // If player chooses to Defend, then a gold border will show around player robot. The enemy robot will always attack if this is chosen.\n      this.setState({...this.state,\n        AttackStyle:{\n        width:'25vw',\n        marginLeft:'0',\n        border:'5px solid Gold',\n        display:'inline-block',\n        position:'relative',\n        borderRadius:'8px'\n        },\n        PlayerAttack:'',\n        Checked:NaN,\n        Disabled:true,\n        EnemyAttackStyle: {\n            width:'25vw',\n            marginLeft:'0',\n            border:'5px solid black',\n            display:'inline-block',\n            position:'relative',\n            borderRadius:'8px'\n        },\n      })\n\n      setTimeout(() => {\n        this.setState({...this.state,\n          EnemyAttackStyle:{\n          width:'25vw',\n          marginLeft:'0',\n          border:'5px solid black',\n          display:'inline-block',\n          position:'relative',\n          animationName:'EnemyAttack',\n          animationDuration:'1s',\n          animationTimingFunction:'ease-in',\n          borderRadius:'8px'\n          }\n      })\n      setTimeout(() => {\n        this.setState({...this.state,\n        Disabled:false,\n        AttackStyle:{\n          width:'25vw',\n          marginLeft:'0',\n          border:'5px solid black',\n          display:'inline-block',\n          position:'relative',\n          borderRadius:'8px'\n          },\n        EnemyAttackStyle:{\n          width:'25vw',\n          marginLeft:'0',\n          border:'5px solid black',\n          display:'inline-block',\n          position:'relative',\n          borderRadius:'8px'\n          }\n      })\n      }, 1000)\n      }, 2000)\n    }else{\n      // Lastly if player chooses to attack then the new enemy health will be set in state and an animation will play that will be synced will the state update.\n      setTimeout(() => {\n        let updateEnemy = this.state.EnemyRobot.map((ele) => {\n        if(ele.Health > 0){\n          ele.Health -= 10\n        }\n        return ele\n      })\n\n        this.setState({...this.state,\n            EnemyRobot:updateEnemy,\n            Disabled:true,\n        })\n      }, 1000)\n      \n      this.setState({...this.state,\n        PlayerAttack:'',\n        Checked:NaN,\n        AttackStyle:{\n          width:'25vw',\n          marginLeft:'0',\n          border:'5px solid black',\n          display:'inline-block',\n          position:'relative',\n          animationName:'Attack',\n          animationDuration:'1s',\n          animationTimingFunction:'ease-in',\n          borderRadius:'8px'\n        },\n        EnemyAttackStyle: {\n            width:'25vw',\n            marginLeft:'0',\n            border:'5px solid black',\n            display:'inline-block',\n            position:'relative',\n            borderRadius:'8px'\n        }\n      });\n      // If the enemy robot's health is at 0 or less then the AttackStyle and EnemyAttackStyle will be reset and the player will be redirected to the YouWin page.\n          setTimeout(() => {\n            if(this.state.EnemyRobot[0].Health <= 0){\n              this.setState({\n                  AttackStyle:{\n                    width:'25vw',\n                    marginLeft:'0',\n                    border:'5px solid black',\n                    display:'inline-block',\n                    position:'relative',\n                    borderRadius:'8px'\n                  },\n                  EnemyAttackStyle: {\n                    width:'25vw',\n                    marginLeft:'0',\n                    border:'5px solid black',\n                    display:'inline-block',\n                    position:'relative',\n                    borderRadius:'8px'\n                  },\n              });\n              this.props.history.push('/YouWin');\n            }else{\n              setTimeout( () => {\n          if(enemyChoice === 1){\n        let healEnemy = this.state.EnemyRobot.map((ele) => {\n            if(ele.Health < 100){\n              ele.Health += 5\n            }\n            return ele;\n          })\n            this.setState({...this.state,\n            EnemyRobot: healEnemy,\n            AttackStyle:{\n            width:'25vw',\n            marginLeft:'0',\n            border:'5px solid black',\n            display:'inline-block',\n            position:'relative',\n            borderRadius:'8px'\n            },\n            EnemyAttackStyle:{\n            width:'25vw',\n            marginLeft:'0',\n            border:'5px solid Green',\n            display:'inline-block',\n            position:'relative',\n            borderRadius:'8px'\n          },\n          Disabled:false\n            })\n        }\n      }, 1000)\n\n        if(enemyChoice === 0){\n        this.setState({...this.state,\n        AttackStyle:{\n          width:'25vw',\n          marginLeft:'0',\n          border:'5px solid black',\n          display:'inline-block',\n          position:'relative',\n          borderRadius:'8px'\n          },\n          EnemyAttackStyle:{\n          width:'25vw',\n          marginLeft:'0',\n          border:'5px solid black',\n          display:'inline-block',\n          position:'relative',\n          animationName:'EnemyAttack',\n          animationDuration:'1s',\n          animationTimingFunction:'ease-in',\n          borderRadius:'8px'\n          }\n      })\n      setTimeout(() =>{\n        let updatePlayer =  this.state.YourRobot.map((ele) => {\n            if(ele.Health > 0){\n            ele.Health -= 10\n          }\n            return ele\n          });\n            this.setState({...this.state,\n          Disabled:false,\n          YourRobot:updatePlayer,\n            EnemyAttackStyle: {\n            width:'25vw',\n            marginLeft:'0',\n            border:'5px solid black',\n            display:'inline-block',\n            position:'relative',\n            borderRadius:'8px'\n        }\n        });\n      }, 1000)\n        setTimeout(() => {\n          if(this.state.YourRobot[0].Health <= 0){\n            this.setState({\n                  AttackStyle:{\n                    width:'25vw',\n                    marginLeft:'0',\n                    border:'5px solid black',\n                    display:'inline-block',\n                    position:'relative',\n                    borderRadius:'8px'\n                  },\n                  EnemyAttackStyle: {\n                    width:'25vw',\n                    marginLeft:'0',\n                    border:'5px solid black',\n                    display:'inline-block',\n                    position:'relative',\n                    borderRadius:'8px'\n                  },\n              });\n              this.props.history.push('/YouLose');\n          }\n        },2000);\n\n        }\n            }\n      }, 2000)\n       \n    }\n  };\n    \n  onChange = (e) => {\n    this.setState({...this.state,\n      PlayerAttack:e.target.value,\n      Checked:e.target.id\n    })\n  };\n\n  onPointerEnter = () => {\n        this.setState({...this.state,\n      GitHubLinkStyle:{\n        listStyleType:'none',\n        position:'relative',\n        border:'1px solid Black',\n        padding:'10px',\n        backgroundColor:'#234691',\n\n      }\n    })\n  };\n  onPointerLeave = () => {\n    this.setState({...this.state,\n      GitHubLinkStyle:{\n        display:'none'\n      }\n    })\n  };\n\n  youWinButton = async () => {\n      let newPlayerHealth = this.state.YourRobot.map((ele) => {\n        ele.Health = 100\n        return ele\n      });\n        let enemyId = this.state.EnemyRobot[0]._id;\n      let newEnemyRobot =  await axios.delete(`https://radiant-everglades-71115.herokuapp.com/${enemyId}`)\n          .then((response) => {\n            return response.data;\n          })\n          .catch((err) => console.log(err));\n        if(!newEnemyRobot || newEnemyRobot.length < 1){\n          this.props.history.push('/Reset')\n        }else{\n            this.setState({...this.state,\n        YourRobot:newPlayerHealth,\n        EnemyRobot:[newEnemyRobot],\n        Disabled:false,\n        AttackStyle:{\n          width:'25vw',\n          marginLeft:'0',\n          border:'5px solid black',\n          display:'inline-block',\n          position:'relative',\n          borderRadius:'8px'\n          },\n          EnemyAttackStyle: {\n            width:'25vw',\n            marginLeft:'0',\n            border:'5px solid black',\n            display:'inline-block',\n            position:'relative',\n            borderRadius:'8px'\n        },\n      });\n      this.props.history.push('/CyberneticCarnage');\n    }\n  };\n  resetButton = async () => {\n    let resetRobots = await axios.post('https://radiant-everglades-71115.herokuapp.com/',\n    {\n      Robots\n    })\n    .then((response) => {\n      return response.data;\n    })\n    .catch((err) => {\n      console.log(err)\n    });\n    this.setState({\n      ...this.state,\n      Robots:resetRobots,\n      Disabled:false,\n        AttackStyle:{\n          width:'25vw',\n          marginLeft:'0',\n          border:'5px solid black',\n          display:'inline-block',\n          position:'relative',\n          borderRadius:'8px'\n          },\n          EnemyAttackStyle: {\n            width:'25vw',\n            marginLeft:'0',\n            border:'5px solid black',\n            display:'inline-block',\n            position:'relative',\n            borderRadius:'8px'\n        },\n    });\n   let getEnemyRobot = await this.state.Robots.find((ele) => {\n      if(ele.PlayerRobot === false){\n        return ele\n      }\n      return null\n    });\n    let getYourRobot = await this.state.Robots.find((ele) => {\n      if(ele.PlayerRobot === true){\n        return ele;\n      }\n      return null;\n    })\n    this.setState({...this.state,\n      YourRobot:[getYourRobot],\n      EnemyRobot:[getEnemyRobot]\n    });\n    this.props.history.push('/CyberneticCarnage');\n  };\n  render(){\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/CyberneticCarnage'>\n        <Home\n        onClick={this.resetButton} \n        onPointerLeave={this.onPointerLeave} \n        onPointerEnter={this.onPointerEnter} \n        GitHubLinkStyle={this.state.GitHubLinkStyle}\n        Loading={this.state.Loading}\n        ></Home></Route>\n        <Route path='/YourRobot'>\n          <YourRobot\n          onClick={this.resetButton} \n          onPointerLeave={this.onPointerLeave} \n          onPointerEnter={this.onPointerEnter} \n          GitHubLinkStyle={this.state.GitHubLinkStyle} \n          YourRobot={this.state.YourRobot}></YourRobot></Route>\n        <Route path='/SingleBattle'>\n            <OneFight \n              onClick={this.resetButton} \n              onPointerLeave={this.onPointerLeave} \n              onPointerEnter={this.onPointerEnter} \n              GitHubLinkStyle={this.state.GitHubLinkStyle}\n              YourRobot={this.state.YourRobot}\n              EnemyRobot={this.state.EnemyRobot}\n              onSubmit={this.onSubmit}\n              onChange={this.onChange}\n              Checked={this.state.Checked}\n              disabled={this.state.Disabled}\n              AttackStyle={this.state.AttackStyle}\n              EnemyStyle={this.state.EnemyAttackStyle}\n            ></OneFight>\n          </Route>\n          <Route path='/YouLose'><YouLose onClick={this.resetButton}></YouLose></Route>\n          <Route path='/YouWin'>\n            <YouWin\n            onClick={this.youWinButton}\n            ></YouWin></Route>\n            <Route path='/Reset'><Reset onClick={this.resetButton}></Reset></Route>\n        <Route  path=''><Error></Error></Route>\n      </Switch>\n    </div>\n  );\n  }\n};\n\n// PropTypes\nApp.propTypes = {\n  Robots:PropTypes.array,\n  EnemyRobots:PropTypes.array,\n  EnemyRobot:PropTypes.array,\n  YourRobot:PropTypes.array,\n  PlayerAttack:PropTypes.string,\n  Disabled:PropTypes.bool,\n  AttackStyle:PropTypes.object,\n  EnemyAttackStyle:PropTypes.object,\n  GitHubLinkStyle:PropTypes.object,\n};\nexport default withRouter(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\n\n\nReactDOM.render(\n  <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}